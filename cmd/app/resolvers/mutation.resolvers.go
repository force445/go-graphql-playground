package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"crypto/rand"
	model "graphql/cmd/app/domain"
	model1 "graphql/cmd/app/domain/dao"
	"graphql/graph"
	"math/big"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.NewPost) (*model1.Post, error) {
	randInt, _ := rand.Int(rand.Reader, big.NewInt(100))
	post := &model1.Post{
		ID:          int(randInt.Int64()),
		Title:       input.Title,
		Description: input.Description,
	}
	r.Posts = append(r.Posts, post)
	return post, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model1.User, error) {
	randInt, _ := rand.Int(rand.Reader, big.NewInt(100))
	user := &model1.User{
		ID:    int(randInt.Int64()),
		Name:  input.Name,
		Email: input.Email,
	}
	r.Users = append(r.Users, user)
	return user, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
